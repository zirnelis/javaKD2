/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package model;

import database.ActionWithDB;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import network.KD2Client;
import network.KD2Server;

/**
 *
 * @author Elina
 */
public class frame extends javax.swing.JFrame {

    KD2Server server = new KD2Server();
    KD2Client client = new KD2Client();
    
    /** Creates new form frame */
    public frame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverConnect = new javax.swing.JButton();
        clientConnect = new javax.swing.JButton();
        generateStudents = new javax.swing.JButton();
        outputTextField = new javax.swing.JTextField();
        sendToClient = new javax.swing.JButton();
        sendToServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverConnect.setText("Connect to server");
        serverConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverConnectActionPerformed(evt);
            }
        });

        clientConnect.setText("Connect to client");
        clientConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientConnectActionPerformed(evt);
            }
        });

        generateStudents.setText("Generate Students");
        generateStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateStudentsActionPerformed(evt);
            }
        });

        outputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputTextFieldActionPerformed(evt);
            }
        });

        sendToClient.setText("Send to Client");
        sendToClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToClientActionPerformed(evt);
            }
        });

        sendToServer.setText("Send to Server");
        sendToServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToServerActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(31, 31, 31)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(clientConnect)
                    .add(serverConnect)
                    .add(generateStudents))
                .add(49, 49, 49)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(sendToClient)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sendToServer))
                    .add(outputTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(30, 30, 30)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(serverConnect)
                        .add(27, 27, 27)
                        .add(clientConnect))
                    .add(outputTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(generateStudents)
                    .add(sendToClient)
                    .add(sendToServer))
                .addContainerGap(131, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputTextFieldActionPerformed

    private void sendToServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendToServerActionPerformed

    private void generateStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateStudentsActionPerformed
        ArrayList<Student> tempList = new ArrayList();
        ActionWithDB db = new ActionWithDB();
        try {
            
            server.insertStudents();
            db.createAndInsertDB(server.getStudents());
            outputTextField.setText("Stdents are generated..");
        } catch (SQLException ex) {
            outputTextField.setText("can`t generate students..");
        }
    }//GEN-LAST:event_generateStudentsActionPerformed

    private void serverConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverConnectActionPerformed
        try {
            server.configureAndStart();
            outputTextField.setText("Server connected..");
        } catch (IOException ex) {
            outputTextField.setText("server can`t connect..");
        }
    }//GEN-LAST:event_serverConnectActionPerformed

    private void clientConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientConnectActionPerformed
        try {
            client.configureAndStartClient();
        } catch (IOException ex) {
            outputTextField.setText("client can`t connect..");
        }
        outputTextField.setText("Client connected..");
    }//GEN-LAST:event_clientConnectActionPerformed

    private void sendToClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToClientActionPerformed
        
    }//GEN-LAST:event_sendToClientActionPerformed
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new frame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clientConnect;
    private javax.swing.JButton generateStudents;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JButton sendToClient;
    private javax.swing.JButton sendToServer;
    private javax.swing.JButton serverConnect;
    // End of variables declaration//GEN-END:variables

}
